library custom_buttons;

import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:firebase_auth_service/firebase_auth_service.dart';
import 'package:provider/single_child_widget.dart';

/// Used to create user-dependent objects that need to be accessible by all widgets.
/// This widgets should live above the [MaterialApp].
/// See [AuthWidget], a descendant widget that consumes the snapshot generated by this builder.
class AuthWidgetBuilder extends StatelessWidget {
  const AuthWidgetBuilder({
    Key key,
    @required this.builder,
    this.userProvidersBuilder,
  }) : super(key: key);
  final Widget Function(BuildContext, AsyncSnapshot<AppUser>) builder;
  final List<SingleChildWidget> Function(BuildContext, AppUser)
      userProvidersBuilder;

  @override
  Widget build(BuildContext context) {
    final authService =
        Provider.of<FirebaseAuthService>(context, listen: false);
    return StreamBuilder<AppUser>(
      stream: authService.authStateChanges(),
      builder: (context, snapshot) {
        final AppUser user = snapshot.data;
        if (user == null || userProvidersBuilder == null) {
          return builder(context, snapshot);
        }
        return MultiProvider(
          providers: userProvidersBuilder(context, user),
          child: builder(context, snapshot),
        );
      },
    );
  }
}

/// Builds the signed-in or non signed-in UI, depending on the user snapshot.
/// This widget should be below the [MaterialApp].
/// An [AuthWidgetBuilder] ancestor is required for this widget to work.
/// Note: this class used to be called [LandingPage].
class AuthWidget extends StatelessWidget {
  const AuthWidget({
    Key key,
    @required this.userSnapshot,
    @required this.signedInBuilder,
    @required this.nonSignedInBuilder,
  }) : super(key: key);
  final AsyncSnapshot<AppUser> userSnapshot;
  final WidgetBuilder nonSignedInBuilder;
  final WidgetBuilder signedInBuilder;

  @override
  Widget build(BuildContext context) {
    if (userSnapshot.connectionState == ConnectionState.active) {
      return userSnapshot.hasData
          ? signedInBuilder(context)
          : nonSignedInBuilder(context);
    }
    return const Scaffold(
      body: Center(
        child: CircularProgressIndicator(),
      ),
    );
  }
}
